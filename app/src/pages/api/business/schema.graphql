type Business {
  activeCampaign: BusinessCampaign
  id: String!
  info: BusinessInfo
  userId: String!
}

type BusinessCampaign {
  btcPayServerStoreId: String
  businessId: String
  content: BusinessCampaignContent
  expiresAt: Date
  id: String!
  investmentMultiple: Float
  slug: String
  totalSatsInvested: Float
}

type BusinessCampaignContent {
  asHtmlString: String
  category: String
  country: String
  description: String
  establishedAt: String
  instagram: String
  latitude: String
  longitude: String
  markerIcon: String
  media: BusinessCampaignContentMedia
  title: String
  website: String
}

type BusinessCampaignContentMedia {
  featuredImageUrl: String
}

type BusinessInfo {
  businessId: String
  establisedAt: String
  id: String!
}

scalar Date

input GetBusinessCampaignBySlugInput {
  slug: String!
}

input GetBusinessesByUserIdInput {
  userId: String!
}

type Mutation {
  createBusiness: Business!
}

type Query {
  getBusinessCampaignBySlug(input: GetBusinessCampaignBySlugInput!): Business!
  getBusinessCampaigns: [BusinessCampaign]!
  getBusinessesByUserId(input: GetBusinessesByUserIdInput!): [Business]!
}